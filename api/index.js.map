{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "C:\\test\\cr-manager\\app\\root.tsx", "C:\\test\\cr-manager\\app\\routes\\index.tsx", "../app/utils.ts", "../app/options.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\nimport styles from \"./styles/app.css\";\n\nexport function links() {\n  return [{ rel: \"stylesheet\", href: styles }];\n}\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"CR-Manager\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import type { LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport {\n  dateDays,\n  getClanMembers,\n  getClanMembersRaceFame,\n  getClanRaceLog,\n  parseDate,\n} from \"~/utils\";\nimport type { IMemberWithRaceFame } from \"~/types\";\nimport { options } from \"~/options\";\n\nexport const loader: LoaderFunction = async () => {\n  const riverRaceLog = await getClanRaceLog(\"#YVYYC9QC\");\n  const members = await getClanMembers(\"#YVYYC9QC\");\n  const membersWithRaceLog = await getClanMembersRaceFame(\n    \"#YVYYC9QC\",\n    members,\n    riverRaceLog\n  );\n\n  return json({ members: membersWithRaceLog });\n};\n\ninterface IProps {\n  members: IMemberWithRaceFame[];\n}\n\nexport default function Index() {\n  const { members }: IProps = useLoaderData();\n  return (\n    <div className=\"flex flex-col w-screen h-screen\">\n      <div className=\"sticky top-0 bg-gray-800 text-center text-white pt-2\">\n        <h1 className=\"text-xl font-medium\">Bock Royale</h1>\n      </div>\n      <div className=\"overflow-auto\">\n        <table className=\"w-full relative\">\n          <thead className=\"\">\n            <tr>\n              <th\n                scope=\"col\"\n                className=\"text-xs font-medium text-white py-4 text-center sticky top-0 border-b bg-gray-800\"\n              >\n                #\n              </th>\n              <th\n                scope=\"col\"\n                className=\"text-xs font-medium text-white py-4 text-left sticky top-0 border-b bg-gray-800\"\n              >\n                Member\n              </th>\n              <th\n                scope=\"col\"\n                className=\"text-xs font-medium text-white py-4 text-left sticky top-0 border-b bg-gray-800\"\n              >\n                Stats\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {members.map((member: IMemberWithRaceFame) => (\n              <tr\n                key={member.tag}\n                className=\"bg-white border-b hover:bg-gray-100\"\n              >\n                <td className=\"py-4 whitespace-nowrap text-sm font-medium text-gray-900 text-center px-2\">\n                  <p>{member.clanRank}</p>\n                  <span className=\"text-xs text-gray-500\">\n                    ({member.previousClanRank})\n                  </span>\n                </td>\n                <td className=\"text-sm text-gray-900 font-light py-4 whitespace-nowrap\">\n                  <h3 className=\"font-semibold py-0.5\">{member.name}</h3>\n                  <p className=\"text-gray-400 text-xs uppercase py-0.5\">\n                    {member.role}\n                  </p>\n                  <p\n                    className={`text-gray-600 text-xs ${\n                      dateDays(member.lastSeen) >= options.awayMaxDays\n                        ? \"text-red-400 font-bold\"\n                        : dateDays(member.lastSeen) >= options.awayDangerDays\n                        ? \"text-orange-400 font-bold\"\n                        : \"\"\n                    }`}\n                  >\n                    Online {parseDate(member.lastSeen)}\n                  </p>\n                </td>\n                <td className=\"text-xs text-gray-800 font-light py-2 whitespace-nowrap\">\n                  <p>Trophies: {member.trophies}</p>\n                  <p>Donations Given: {member.donations}</p>\n                  <p>Donations Received: {member.donationsReceived}</p>\n                  <p\n                    className={`${\n                      member.currentRaceFame < options.warWeekFame\n                        ? \"text-red-400 font-bold\"\n                        : \"\"\n                    }`}\n                  >\n                    War Fame: {member.currentRaceFame}\n                  </p>\n                  <p\n                    className={`${\n                      member.lastRaceFame < options.warWeekFame\n                        ? \"text-red-400 font-bold\"\n                        : \"\"\n                    }`}\n                  >\n                    Last War Fame: {member.lastRaceFame}\n                  </p>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <footer>\n        <div className=\"sticky top-0 bg-gray-800 text-center text-white py-2\">\n          <h1 className=\"text-sm font-light\">@2022</h1>\n        </div>\n      </footer>\n    </div>\n  );\n}\n", "import { differenceInDays, formatDistanceToNowStrict } from \"date-fns\";\n\nimport type {\n  IMember,\n  IMemberWithRaceFame,\n  IParticipants,\n  IRaceLog,\n  IStandings,\n} from \"./types\";\n\nconst cleanTag = (clanTag: string) => clanTag.replace(\"#\", \"\");\n\nexport const getClanMembers = async (clanTag: string): Promise<IMember[]> => {\n  const url = `https://crproxy.herokuapp.com/clans/%23${cleanTag(\n    clanTag\n  )}/members`;\n\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const members = data?.items;\n  return members;\n};\n\nexport const getClanRaceLog = async (clanTag: string): Promise<IRaceLog[]> => {\n  const url = `https://crproxy.herokuapp.com/clans/%23${cleanTag(\n    clanTag\n  )}/riverracelog`;\n\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const raceLog: IRaceLog[] = data?.items;\n  return raceLog;\n};\n\nconst getClanMembersFromRace = (standings: IStandings) => {\n  return standings.clan.participants.map((participant) => {\n    const {\n      tag,\n      name,\n      fame,\n      repairPoints,\n      boatAttacks,\n      decksUsed,\n      decksUsedToday,\n    } = participant;\n    return {\n      tag,\n      name,\n      fame,\n      repairPoints,\n      boatAttacks,\n      decksUsed,\n      decksUsedToday,\n    };\n  });\n};\n\nconst getClanMembersWithRaceFame = (\n  members: IMember[],\n  currentRaceParticipants: IParticipants[],\n  lastRaceParticipants: IParticipants[]\n) => {\n  return members.map((member) => {\n    const { tag } = member;\n\n    const currentRaceFame =\n      currentRaceParticipants.filter(\n        (participant) => participant.tag === tag\n      )[0]?.fame || 0;\n    const lastRaceFame =\n      lastRaceParticipants.filter((participant) => participant.tag === tag)[0]\n        ?.fame || 0;\n\n    return {\n      ...member,\n      currentRaceFame,\n      lastRaceFame,\n    };\n  });\n};\n\nexport const getClanMembersRaceFame = async (\n  clanTag: string,\n  members: IMember[],\n  raceLog: IRaceLog[]\n): Promise<IMemberWithRaceFame[]> => {\n  const getClanStatsOfRace = (race: IRaceLog) => {\n    return race.standings.filter((standing) => {\n      const { clan } = standing;\n      return clan.tag === clanTag;\n    })[0];\n  };\n\n  const currentRace: IStandings = getClanStatsOfRace(raceLog[0]);\n  const lastRace: IStandings = getClanStatsOfRace(raceLog[1]);\n\n  const currentRaceParticipants: IParticipants[] =\n    getClanMembersFromRace(currentRace);\n  const lastRaceParticipants: IParticipants[] =\n    getClanMembersFromRace(lastRace);\n\n  const clanMembersWithRaceFame: IMemberWithRaceFame[] =\n    getClanMembersWithRaceFame(\n      members,\n      currentRaceParticipants,\n      lastRaceParticipants\n    );\n\n  return clanMembersWithRaceFame;\n};\n\nexport const parseDate = (date: string) => {\n  const fullDate = date.split(\".\")[0];\n  const simpleDate = fullDate.split(\"T\")[0];\n\n  const year = parseInt(simpleDate.slice(0, 4));\n  const month = parseInt(simpleDate.slice(4, 6)) - 1;\n  const day = parseInt(simpleDate.slice(6, 8));\n\n  const dateReceived = new Date(year, month, day);\n\n  return formatDistanceToNowStrict(dateReceived, {\n    addSuffix: true,\n    roundingMethod: \"floor\",\n    unit: \"day\",\n  });\n};\n\nexport const dateDays = (date: string) => {\n  const fullDate = date.split(\".\")[0];\n  const simpleDate = fullDate.split(\"T\")[0];\n\n  const year = parseInt(simpleDate.slice(0, 4));\n  const month = parseInt(simpleDate.slice(4, 6)) - 1;\n  const day = parseInt(simpleDate.slice(6, 8));\n\n  const dateReceived = new Date(year, month, day);\n  return differenceInDays(new Date(), dateReceived);\n};\n", "export const options = {\n  awayMaxDays: 6,\n  awayDangerDays: 3,\n  warWeekFame: 1000,\n};\n", "export default {'version':'b1ab15ae','entry':{'module':'/build/entry.client-5M76FMCG.js','imports':['/build/_shared/chunk-6B35WKWZ.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-FF2QBBPA.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-E6MCQRCI.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-B1AB15AE.js'};", "\nimport * as entryServer from \"C:\\\\test\\\\cr-manager\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"C:\\\\test\\\\cr-manager\\\\app\\\\root.tsx\";\nimport * as route1 from \"C:\\\\test\\\\cr-manager\\\\app\\\\routes\\\\index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    }\n  };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,YAAuB;;;ACDvB;AAAA;AAAA;AAAA;AACA,mBAA4B;AAC5B,oBAA+B;AAEhB,uBACb,SACA,oBACA,iBACA,cACA;AACA,MAAI,SAAS,kCACX,oCAAC,0BAAD;AAAA,IAAa,SAAS;AAAA,IAAc,KAAK,QAAQ;AAAA;AAGnD,kBAAgB,IAAI,gBAAgB;AAEpC,SAAO,IAAI,SAAS,oBAAoB,QAAQ;AAAA,IAC9C,QAAQ;AAAA,IACR,SAAS;AAAA;AAAA;;;AClBb;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAOO;;;;;;AAGA,iBAAiB;AACtB,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM;AAAA;AAE9B,IAAM,OAAqB,MAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA;AAGG,eAAe;AAC5B,SACE,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oCAAC,QAAD,MACE,oCAAC,oBAAD,OACA,oCAAC,qBAAD,QAEF,oCAAC,QAAD,MACE,oCAAC,sBAAD,OACA,oCAAC,iCAAD,OACA,oCAAC,uBAAD,OACA,oCAAC,0BAAD;AAAA;;;AC/BR;AAAA;AAAA;AAAA;AAAA;AACA,kBAAqB;AACrB,oBAA8B;;;ACF9B,sBAA4D;AAU5D,IAAM,WAAW,CAAC,YAAoB,QAAQ,QAAQ,KAAK;AAEpD,IAAM,iBAAiB,OAAO,YAAwC;AAC3E,QAAM,MAAM,0CAA0C,SACpD;AAGF,QAAM,WAAW,MAAM,MAAM;AAC7B,QAAM,EAAE,SAAS,MAAM,SAAS;AAEhC,QAAM,UAAU,6BAAM;AACtB,SAAO;AAAA;AAGF,IAAM,iBAAiB,OAAO,YAAyC;AAC5E,QAAM,MAAM,0CAA0C,SACpD;AAGF,QAAM,WAAW,MAAM,MAAM;AAC7B,QAAM,EAAE,SAAS,MAAM,SAAS;AAEhC,QAAM,UAAsB,6BAAM;AAClC,SAAO;AAAA;AAGT,IAAM,yBAAyB,CAAC,cAA0B;AACxD,SAAO,UAAU,KAAK,aAAa,IAAI,CAAC,gBAAgB;AACtD,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACE;AACJ,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;AAKN,IAAM,6BAA6B,CACjC,SACA,yBACA,yBACG;AACH,SAAO,QAAQ,IAAI,CAAC,WAAW;AAhEjC;AAiEI,UAAM,EAAE,QAAQ;AAEhB,UAAM,kBACJ,+BAAwB,OACtB,CAAC,gBAAgB,YAAY,QAAQ,KACrC,OAFF,mBAEM,SAAQ;AAChB,UAAM,eACJ,4BAAqB,OAAO,CAAC,gBAAgB,YAAY,QAAQ,KAAK,OAAtE,mBACI,SAAQ;AAEd,WAAO,iCACF,SADE;AAAA,MAEL;AAAA,MACA;AAAA;AAAA;AAAA;AAKC,IAAM,yBAAyB,OACpC,SACA,SACA,YACmC;AACnC,QAAM,qBAAqB,CAAC,SAAmB;AAC7C,WAAO,KAAK,UAAU,OAAO,CAAC,aAAa;AACzC,YAAM,EAAE,SAAS;AACjB,aAAO,KAAK,QAAQ;AAAA,OACnB;AAAA;AAGL,QAAM,cAA0B,mBAAmB,QAAQ;AAC3D,QAAM,WAAuB,mBAAmB,QAAQ;AAExD,QAAM,0BACJ,uBAAuB;AACzB,QAAM,uBACJ,uBAAuB;AAEzB,QAAM,0BACJ,2BACE,SACA,yBACA;AAGJ,SAAO;AAAA;AAGF,IAAM,YAAY,CAAC,SAAiB;AACzC,QAAM,WAAW,KAAK,MAAM,KAAK;AACjC,QAAM,aAAa,SAAS,MAAM,KAAK;AAEvC,QAAM,OAAO,SAAS,WAAW,MAAM,GAAG;AAC1C,QAAM,QAAQ,SAAS,WAAW,MAAM,GAAG,MAAM;AACjD,QAAM,MAAM,SAAS,WAAW,MAAM,GAAG;AAEzC,QAAM,eAAe,IAAI,KAAK,MAAM,OAAO;AAE3C,SAAO,+CAA0B,cAAc;AAAA,IAC7C,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB,MAAM;AAAA;AAAA;AAIH,IAAM,WAAW,CAAC,SAAiB;AACxC,QAAM,WAAW,KAAK,MAAM,KAAK;AACjC,QAAM,aAAa,SAAS,MAAM,KAAK;AAEvC,QAAM,OAAO,SAAS,WAAW,MAAM,GAAG;AAC1C,QAAM,QAAQ,SAAS,WAAW,MAAM,GAAG,MAAM;AACjD,QAAM,MAAM,SAAS,WAAW,MAAM,GAAG;AAEzC,QAAM,eAAe,IAAI,KAAK,MAAM,OAAO;AAC3C,SAAO,sCAAiB,IAAI,QAAQ;AAAA;;;AC3I/B,IAAM,UAAU;AAAA,EACrB,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,aAAa;AAAA;;;AFUR,IAAM,SAAyB,YAAY;AAChD,QAAM,eAAe,MAAM,eAAe;AAC1C,QAAM,UAAU,MAAM,eAAe;AACrC,QAAM,qBAAqB,MAAM,uBAC/B,aACA,SACA;AAGF,SAAO,sBAAK,EAAE,SAAS;AAAA;AAOV,iBAAiB;AAC9B,QAAM,EAAE,YAAoB;AAC5B,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAsB,iBAEtC,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,SAAD;AAAA,IAAO,WAAU;AAAA,KACf,oCAAC,SAAD;AAAA,IAAO,WAAU;AAAA,KACf,oCAAC,MAAD,MACE,oCAAC,MAAD;AAAA,IACE,OAAM;AAAA,IACN,WAAU;AAAA,KACX,MAGD,oCAAC,MAAD;AAAA,IACE,OAAM;AAAA,IACN,WAAU;AAAA,KACX,WAGD,oCAAC,MAAD;AAAA,IACE,OAAM;AAAA,IACN,WAAU;AAAA,KACX,YAKL,oCAAC,SAAD,MACG,QAAQ,IAAI,CAAC,WACZ,oCAAC,MAAD;AAAA,IACE,KAAK,OAAO;AAAA,IACZ,WAAU;AAAA,KAEV,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KACZ,oCAAC,KAAD,MAAI,OAAO,WACX,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KAAwB,KACpC,OAAO,kBAAiB,OAG9B,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KACZ,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAwB,OAAO,OAC7C,oCAAC,KAAD;AAAA,IAAG,WAAU;AAAA,KACV,OAAO,OAEV,oCAAC,KAAD;AAAA,IACE,WAAW,yBACT,SAAS,OAAO,aAAa,QAAQ,cACjC,2BACA,SAAS,OAAO,aAAa,QAAQ,iBACrC,8BACA;AAAA,KAEP,WACS,UAAU,OAAO,aAG7B,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KACZ,oCAAC,KAAD,MAAG,cAAW,OAAO,WACrB,oCAAC,KAAD,MAAG,qBAAkB,OAAO,YAC5B,oCAAC,KAAD,MAAG,wBAAqB,OAAO,oBAC/B,oCAAC,KAAD;AAAA,IACE,WAAW,GACT,OAAO,kBAAkB,QAAQ,cAC7B,2BACA;AAAA,KAEP,cACY,OAAO,kBAEpB,oCAAC,KAAD;AAAA,IACE,WAAW,GACT,OAAO,eAAe,QAAQ,cAC1B,2BACA;AAAA,KAEP,mBACiB,OAAO,qBAQrC,oCAAC,UAAD,MACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAqB;AAAA;;;AGvH7C,IAAO,0BAAQ,EAAC,WAAU,YAAW,SAAQ,EAAC,UAAS,mCAAkC,WAAU,CAAC,uCAAqC,UAAS,EAAC,QAAO,EAAC,MAAK,QAAO,YAAW,QAAU,QAAO,IAAG,SAAQ,QAAU,iBAAgB,QAAU,UAAS,2BAA0B,WAAU,QAAU,aAAY,OAAM,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,SAAO,gBAAe,EAAC,MAAK,gBAAe,YAAW,QAAO,QAAO,QAAU,SAAQ,MAAK,iBAAgB,QAAU,UAAS,mCAAkC,WAAU,QAAU,aAAY,OAAM,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,WAAQ,OAAM;;;ACKjoB,IAAM,QAAQ,EAAE,QAAQ;AACxB,IAAM,SAAS;AAAA,EACpB,QAAQ;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA;",
  "names": []
}
